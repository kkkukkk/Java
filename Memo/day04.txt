연산자
	연산의 결과가 어떤타입인지 파악하자
	산술연산자
	관계연산자
	논리연산자
		a && b	: and연산(논리곱)
			a그리고b가 둘다 true이라면 결과는 true
			아니면 false
		a || b 	: or연산(논리합)
			a혹은b 둘 중 하나라도 true면 결과는 true
			아니면 false
		!a	: not연산(논리부정)
			a가 true라면 결과는 false
			a가 false라면 결과는 true
	★★논리 연산의 결과는 boolean 타입
	10 > 5 && 7 != 5

연산자의 우선순위
	최우선 연산자	()
	단항 연산자	!
	산술 연산자	+ - * / %
	쉬프트 연산자	
	관계 연산자	> < >= <= == !=
	논리 연산자	&& ||
	삼항 연산자	
	대입 연산자	=




	삼항연산자
		조건식 ? 참일때값 : 거짓일때값
		조건식이 참이라면 :(콜론)앞의 값이 결과로 나온다
		조건식이 거짓이라면 : 뒤의 값이 결과로 나온다  
		

	조건식
		참 또는 거짓을 판별할수 있는 식
		(조건식 자리에는 boolean타입이 와야한다)

제어문
	조건문
		if문
		switch문
	반복문
		for문
		while문
		do~while문
----------------------------------------------------------------------------------------------
조건문
	조건에 따라서 다른 코드를 실행(분기처리)하기 위해 사용한다

if 문
	if(조건식){
		조건식이참일때수행할문장;
		조건식이참일때수행할문장;
		.....
	}
	if문 바깥문장;

	if(조건식){
		조건식이참일때실행되는영역;
	}else {
		조건식이거짓일때실행되는영역;
	}

	if(조건식1){
		조건식1이참일때실행되는영역;
	}else if(조건식2){
		조건식1은거짓,2는참일때실행되는영역;
	}else if(조건식3){
		조건식1,2는거짓,3은참일때실행되는영역;	
	} .... {
		...
	}else{
		위에있는조건식이모두거짓일때실행되는영역;
	}

if 문 vs 삼항연산자
	모든 삼항연산자는 if문으로 바꿀 수 있다
	하지만 모든 if문을 삼항연산자로 바꿀 순 없다

	삼항연산자의 장점 한줄에 코드를 쓸 수 있다
	if문의 장점 가독성이 좋다

	복잡한 코드를 수행해야 할 때는 if문을 사용하고
	간단하게 나타낼 수 있는 코드는 삼항연산자를 사용한다

if문 여러개 vs if ~ else if
	if 문이 여러개 쓰여있으면 컴퓨터는 각각의 if문 마다
	조건식을 검사한다
	if ~ else if로 연결되어있으면 조건식이 참이되는 순간
	그 아래쪽의 조건식은 검사하지 않는다

	따라서 여러번 검사를 해야 할 경우에는 if문 여러개
	여러번 검사할 필요가 없는 경우에는 if ~ else if를
	사용하면 좋다