오류
	예외(Exception)
		개발자가 다룰 수 있는 오류
		runtime exception
			실행중 발생하는 예외
		compile exception
			컴파일시 발생하는 예외
		logical exception
			논리적으로 예외라고 생각되는 경우


	에러(Error)
		개발자가 다룰 수 없는 오류

예외처리 (Exception Handling)
	예외가 발생하면 프로그램이 강제종료되고
	그 과정에서 사용자 경험이 나빠질 수 있고
	데이터 손실이 일어날 수 있다

try - catch
	try{
		예외가 발생할 수 있는 코드;
	}catch(예외1 예외객체){
		예외1가 발생하면 실행되는 코드
	}catch(Exception 예외객체){
		그 외의 예외가 발생한다면 실행할 코드;	
	}finally{
		예외가 발생하든 안하든 실행되는 코드;
	}
	
자바의 예외 클래스 구성
Object
	Throwable
		Error
			...
		Exception
			...(컴파일예외)
			RuntimeException
				..(런타임예외)

throws
	예외 던지기

	예외 처리의 책임을 떠넘기는 행위
	예외처리를 메소드를 사용하는 사람에게 전가함으로써
	예외처리에 대한 자율성을 보장하고, 메소드를 사용하는
	사람 마을대로 예외처리를 할 수 있다.

	여러개의 예외가 발생할 수 있는 경우
	콤마를 통해 알려주면 된다

throw
	예외를 발생시키는 키워드

사용자 정의 예외
	컴파일 예외로 만들고 싶다면 Exception을 상속받는다
	런타임 예외로 만들고 싶다면 RuntimeException을 상속받는다

	부모 생성자를 활용하면 부연설명을 문자열로 넣어줄 수 있다


---------------------------------------------------------------------------------------------
컬렉션 프레임워크(Collection Framework)
Collection
	List
		중복된 값을 저장할 수 있다
		순서가 존재한다
		ArrayList
		LinkedList
		....
	Set
		중복된 값은 저장할 수 없다
		순서가 존재하지 않는다
		HashSet
		TreeSet
		....
	Map	
		key와 value가 한 쌍으로 저장된다
		key는 중복 X, value 는 중복 O
		순서가 존재하지 않는다.
		HashMap
		TreeMap
		...


ArrayList
	ArrayList<클래스타입> 리스트명 = new ArrayList<클래스타입>();

<>
	제네릭
	메소드를 만드는 사람 입장에서 타입을 확정하기 어려운 경우에
	제네릭을 활용하여 외부로부터 클래스타입을 입력받는 문법


배열 vs ArrayList
	크기가 가변적으로 변해야 할 경우에는 ArrayList
	크기가 고정적이어도 상관 없을 경우에는 배열



